generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByNulls", "extendedWhereUnique"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
  /// 用户名称
  name          String?
  /// 用户邮箱
  email         String    @unique
  /// 是否验证功能
  emailVerified DateTime? @map("email_verified")
  /// 用户头像
  image         String?
  /// 用户密码
  password      String?
  accounts      Account[]

  @@map("users")
}

model Account {
  id                String        @id @default(cuid())
  userId            String        @map("user_id")
  provider          String
  providerAccountId String        @map("provider_account_id")
  refreshToken      String?       @map("refresh_token")
  accessToken       String?       @map("access_token") @db.Text
  expiresAt         Int?          @map("expires_at")
  tokenType         String?       @map("token_type")
  scope             String?
  idToken           String?       @map("id_token") @db.Text
  sessionState      String?       @map("session_state")
  type              accounts_type
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String                @unique
  type       VerificationTokenType
  createdAt  DateTime              @default(now()) @map("created_at")
  expires    DateTime
  usedAt     DateTime?             @map("used_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Point {
  id     String @id @default(cuid())
  userId String @unique @map("user_id")

  @@map("points")
}

model Task {
  id            String    @id @default(cuid())
  /// 用户ID
  userId        String    @map("user_id")
  /// PDF hash
  pdfHash       String    @map("pdf_hash")
  /// 语言
  language      String
  /// 任务类型
  type          TaskType
  /// 消耗point
  consumePoints Decimal   @map("consume_points")
  state         TaskState
  /// 创建时间
  createdAt     DateTime  @map("created_at")
  /// 结束时间
  finishedAt    DateTime? @map("finished_at")
  summary       Summary?  @relation(fields: [pdfHash, language], references: [pdfHash, language])

  @@index([pdfHash, language, type])
  @@map("tasks")
}

model Summary {
  id                  String   @id @default(cuid())
  /// PDF hash
  pdfHash             String   @map("pdf_hash")
  /// 语言
  language            String
  /// 标题
  title               String   @db.Text
  /// 基础内容
  basicInfo           String   @map("basic_info") @db.Text
  /// 第一页总结内容
  firstPageConclution String   @map("first_page_conclution") @db.Text
  /// 总结内容
  content             String   @db.Text
  createdAt           DateTime
  tasks               Task[]

  @@unique([pdfHash, language])
  @@map("summaries")
}

/// 关键词库
model Keywords {
  id             String    @id @default(cuid())
  /// 关键词缩写
  keywordShort   String    @map("keyword_short")
  /// 关键词原文
  searchKeywords String?   @map("search_keywords")
  createTime     DateTime? @map("create_time")
  updateTime     DateTime? @map("update_time") @db.Timestamp(0)
  subscribeKeywords   SubscribeKeywords[]

  @@map("keyword_subscribe_table")
}


///   用户订阅关键词表
model SubscribeKeywords {
  id               String    @id @default(cuid())
  /// 关键词
  weChatUserId     String @map("we_chat_user_id")
  /// 对应文献pdfurl
  keywordId        String @map("keyword_id")
  //关键词详情
  keywords         Keywords? @relation(fields: [keywordId], references: [id])

  @@unique([weChatUserId, keywordId])
  @@index([weChatUserId, keywordId])
  @@map("subscribe_keywords")
}


/// 关键词与pdf 关联中间表
model KeywordsPdf {
  id             String @id @default(cuid())
  /// 关键词
  searchKeywords String @map("search_keywords")
  /// 对应文献pdfurl
  pdfUrl         String @map("pdf_url")

  @@unique([searchKeywords, pdfUrl])
  @@map("search_keywords_pdf")
}

/// paper预览图库
model PaperImage {
  id             String @id @default(cuid())
  /// 关键词
  searchKeywords String @map("search_keywords")
  /// 预览图路径
  imgUrl         String @map("img_url")

  @@map("keywords_img_table")
}

/// 文献总结表
model PaperSummary {
  id            String    @id @default(cuid())
  /// 文献pdfurl
  pdfUrl        String    @unique @map("pdf_url")
  /// pdf hash值
  pdfHash       String    @unique @map("pdf_hash")
  /// 思维导图图片地址
  mindMap       String    @map("mind_map")
  /// 缩写标题
  shortTitle    String    @map("short_title") @db.Text
  /// 标题
  title         String    @db.Text
  /// 共计页数
  pages         Int?
  /// 语言
  languages     String?
  /// 0是最长，1是中等，2是最短
  articleLength Int?      @map("article_length")
  /// 发表时间
  pubTime       DateTime? @map("pub_time")
  createTime    DateTime? @map("create_time")
  updateTime    DateTime? @map("update_time") @db.Timestamp(0)
  paperInfo     PaperInfo? @relation(fields: [pdfHash], references: [pdfHash])

  @@map("subscribe_paper_summary")
}

/// 文献基础信息表
model PaperInfo {
  id            String         @id @default(cuid())
  /// 对应文献pdfurl
  pdfUrl        String         @unique @map("pdf_url")
  /// pdf hash值
  pdfHash       String         @unique @map("pdf_hash")
  /// 年份可以更具体一点，具体到天
  year          Int?
  /// 标题
  title         String?
  /// 代码链接
  code          String?        @db.Text
  /// 文章引用doi
  doi           String?
  /// 相关联的doi
  relatedDoi    String         @map("related_doi")
  /// 被引用链接
  citedByUrl    String         @map("cited_by_url")
  /// 作者
  authors       String?
  /// 摘要
  abstract      String         @db.Text
  /// 发表时间
  pubTime       DateTime?      @map("pub_time")
  /// paper内的keywords
  paperKeywords String         @map("paper_keywords")
  paperSummary  PaperSummary[]
  favoriteDetails FavoriteDetails[]
  wxLike        Wxlike[]

  @@map("subscribe_paper_info")
}


/// 收藏夹
model Favorite {
  id             String @id @default(cuid())
  ///  微信用户编号
  weChatUserId   String @map("we_chat_user_id")
  /// 微信用户 openid
  openId         String @map("open_id")
  ///  收藏夹名称
  name           String?
  ///  创建时间
  createTime     DateTime? @map("create_time")
  updateTime     DateTime? @map("update_time") @db.Timestamp(0)
  /// 收藏夹内容
  favoriteDetails FavoriteDetails[]

  @@map("favorite")
}


/// 收藏夹内容
model FavoriteDetails {
  id             String @id @default(cuid())
  /// 微信用户编号
  weChatUserId   String @map("we_chat_user_id")
  /// 微信用户 openid
  openId         String @map("open_id")
  /// 收藏夹主键
  favoriteId     String? @map("favorite_id")
  /// 文章主键
  paperId        String? @map("paper_id")
  /// 收藏来源
  source         String?
  /// 创建时间
  createTime     DateTime? @map("create_time")
  updateTime     DateTime? @map("update_time") @db.Timestamp(0)
  favorite       Favorite?  @relation(fields: [favoriteId], references: [id])
  paperInfo      PaperInfo?  @relation(fields: [paperId], references: [id])

  @@map("favorite_detail")
}


/// 点赞
model Wxlike {
  id             String @id @default(cuid())
  ///  微信用户编号
  weChatUserId   String @map("we_chat_user_id")
  /// 微信用户 openid
  openId         String @map("open_id")
  ///  点赞文章主键
  paperId        String?
  ///  创建时间
  createTime     DateTime? @map("create_time")
  paperInfo      PaperInfo?  @relation(fields: [paperId], references: [id])

  @@map("wx_like")
}


/// 微信用户表
model WxUser {
  id          String    @id @default(cuid())
  openId      String    @unique @map("open_id")
  unionId     String    @unique @map("union_id")
  nickName    String?   @map("nick_name")
  phone       String    @unique
  email       String?
  avatar      String?
  country     String?
  province    String?
  city        String?
  birthday    String?
  educational String?
  gender      String?
  interest    String?
  createTime  DateTime? @map("create_time")
  updateTime  DateTime? @map("update_time") @db.Timestamp(0)

  @@map("wx_users")
}

enum VerificationTokenType {
  register
  reset_password
}

enum TaskState {
  /// 正在运行
  RUNNING
  /// 成功
  SUCCESS
  /// 失败
  FAIL
}

enum TaskType {
  /// 总结
  SUMMARY
  /// 翻译
  TRANSLATE
}

enum accounts_type {
  oauth
  email
  credentials
}
